{"version":3,"sources":["Box.js","Queue.js","PriorityQueue.js","App.js","index.js"],"names":["Box","props","mouseEnter","event","currentElement","document","getElementById","row","col","buttons","startSet","endSet","classList","contains","add","setEndSet","setStartSet","addClasses","remove","removeClasses","id","className","onMouseEnter","e","onMouseDown","style","border","height","boxSize","toString","width","Queue","this","elements","prototype","push","dequeue","shift","isEmpty","length","QElement","priority","priority2","element","PriorityQueue","items","qElement","contain","i","splice","value","App","running","useState","interval","undefined","getCoords","getAttribute","parseInt","getElement","coords","getNeighbors","filter","a","stopInterval","clearInterval","goButton","innerHTML","color","reconstructPath","start","currentNode","cameFrom","window","addEventListener","preventDefault","display","gridHeight","Math","floor","innerHeight","gridWidth","innerWidth","functionKeys","end","stack","require","closed","Set","setInterval","pop","has","neighbors","neighbor","nextQueue","nextQueueHash","h","point1","point2","row1","col1","row2","col2","abs","openSet","put","openSetHash","gScore","fScore","found","get","delete","tempGScore","Infinity","distances","getDistance","distance","newCost","heuristics","lowestH","Object","entries","key","split","getLowestHeuristic","count","writeUps","userSelect","onClick","algorithmFunction","getElementsByClassName","blankElements","name","Array","from","forEach","startAlgorithm","onChange","algo","target","algorithmChange","grid","getGrid","map","location","reload","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2c68788d.chunk.js","sourcesContent":["export default function Box(props){\r\n\r\n    function removeClasses(currentElement){\r\n        if (currentElement.classList.contains(\"start\")){\r\n            currentElement.classList.remove(\"start\")\r\n            props.setStartSet(false)\r\n            return\r\n        }\r\n        if (currentElement.classList.contains(\"end\")){\r\n            currentElement.classList.remove(\"end\")\r\n            props.setEndSet(false)\r\n            return\r\n        }\r\n        currentElement.classList.remove('barrier')\r\n    }\r\n\r\n    function addClasses(currentElement){\r\n        if (!props.startSet){\r\n            currentElement.classList.add(\"start\")\r\n            props.setStartSet(true)\r\n            return;\r\n        }\r\n\r\n        if (!props.endSet){\r\n            currentElement.classList.add(\"end\")\r\n            props.setEndSet(true);\r\n            return;\r\n        }\r\n\r\n        if (!currentElement.classList.contains(\"start\") && !currentElement.classList.contains(\"end\")){\r\n            currentElement.classList.add(\"barrier\")\r\n        }\r\n    }\r\n    \r\n    function mouseEnter(event){\r\n        \r\n        const currentElement = document.getElementById('row' + props.row + 'col' + props.col)\r\n\r\n        if (event.buttons === 2){\r\n            removeClasses(currentElement)   \r\n            return;\r\n        }\r\n\r\n        if (event.buttons === 1){\r\n            addClasses(currentElement)\r\n            return;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id={'row'+props.row+\"col\"+props.col} className='box' onMouseEnter={(e) => mouseEnter(e)} onMouseDown={(e) => mouseEnter(e)} row={props.row} col={props.col} style={{\r\n            // backgroundColor: 'grey',\r\n            border: '1px solid black',\r\n            height: (props.boxSize-2).toString() + 'px',\r\n            width: (props.boxSize-2).toString() + 'px'\r\n        }}></div>\r\n    )\r\n}","export default function Queue() {\r\n    this.elements = []\r\n\r\n    Queue.prototype.add = function(e) {\r\n        this.elements.push(e)\r\n    }\r\n\r\n    Queue.prototype.dequeue = function () {\r\n        return this.elements.shift()\r\n    }\r\n\r\n    Queue.prototype.isEmpty = function () {\r\n        return this.elements.length === 0\r\n    }\r\n}","// https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\r\n\r\n// User defined class\r\n// to store element and its priority\r\nclass QElement {\r\n    constructor(priority, priority2, element) {\r\n        this.element = element;\r\n        this.priority = priority;\r\n        this.priority2 = priority2\r\n    }\r\n}\r\n\r\n// PriorityQueue class\r\nexport default class PriorityQueue {\r\n\r\n    // An array is used to implement priority\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    // functions to be implemented\r\n    // put(item, priority)\r\n    // dequeue()\r\n    // front()\r\n    // isEmpty()\r\n    // printPQueue()\r\n\r\n\r\n    put(priority, priority2, element) {\r\n        // creating object from queue element\r\n        var qElement = new QElement(priority, priority2, element);\r\n        var contain = false;\r\n\r\n        // iterating through the entire\r\n        // item array to add element at the\r\n        // correct location of the Queue\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if ((this.items[i].priority > qElement.priority) || (this.items[i].priority === qElement.priority && this.items[i].priority2 > qElement.priority2)) {\r\n                this.items.splice(i, 0, qElement);\r\n                contain = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // if the element have the highest priority\r\n        // it is added at the end of the queue\r\n        if (!contain) {\r\n            this.items.push(qElement);\r\n        }\r\n    }\r\n\r\n    get() {\r\n        // return the dequeued element\r\n        // and remove it.\r\n        // if the queue is empty\r\n        // returns Underflow\r\n        if (this.isEmpty())\r\n            return \"Underflow\";\r\n        var value = this.items.shift()\r\n        return [value.priority, value.priority2, value.element];\r\n    }\r\n    front() {\r\n        // returns the highest priority element\r\n        // in the Priority queue without removing it.\r\n        if (this.isEmpty())\r\n            return \"No elements in Queue\";\r\n        return this.items[0];\r\n    }\r\n\r\n    isEmpty() {\r\n        // return true if the queue is empty.\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    look() {\r\n        return(this.items)\r\n    }\r\n}","import Box from './Box.js'\nimport './styles.css'\nimport Queue from './Queue'\nimport PriorityQueue from './PriorityQueue.js'\nimport { useState } from 'react'\n\nexport default function App() {\n\n  const [startSet, setStartSet] = useState(false)\n  const [endSet, setEndSet] =  useState(false)\n\n  // keep track of weather or not it is running\n  var running;\n\n  // timing for visualizations\n  var interval = undefined;\n\n  // getting grid coords from cell element\n  function getCoords(element) {\n    var row = element.getAttribute('row')\n    var col = element.getAttribute('col')\n    row = parseInt(row)\n    col = parseInt(col)\n    return ([row, col])\n  }\n\n  // getting cell element from grid coords\n  function getElement(coords) {\n    var [row, col] = coords\n    return (document.getElementById('row' + row + 'col' + col))\n  }\n\n  // clears the used squares before running, checks start and end, passed the function to call.\n  function startAlgorithm(functionKeys) {\n    if (running) {\n      stopInterval()\n      return\n    }\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Stop\"\n    goButton.style.color = 'Red'\n\n    running = true\n    var algorithmFunction = functionKeys[document.getElementById('algorithm').value]\n\n    function blankElements(elements, name) {\n      Array.from(elements).forEach(element => element.classList.remove(name))\n    }\n    try {\n      var start = document.getElementsByClassName('start')[0]\n      var end = document.getElementsByClassName('end')[0]\n      start.classList = 'start'\n      end.classList = 'end'\n    }\n    catch {\n      return\n    }\n    blankElements(document.getElementsByClassName('closed'), 'closed')\n    blankElements(document.getElementsByClassName('path'), 'path')\n    blankElements(document.getElementsByClassName('open'), 'open')\n\n    algorithmFunction(start, end)\n  }\n\n  // get the given neighbors of a cell.. this includes barriers and closed nodes so have to filter in the function\n  function getNeighbors(element) {\n    var [row, col] = getCoords(element)\n    var elements = []\n    elements.push(getElement([row + 1, col]))\n    elements.push(getElement([row - 1, col]))\n    elements.push(getElement([row, col + 1]))\n    elements.push(getElement([row, col - 1]))\n    elements = elements.filter((a) => a)\n\n    return (elements)\n  }\n\n  // stop the interval from running when the algorithm is done\n  function stopInterval() {\n    clearInterval(interval)\n    running = false\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Go\"\n    goButton.style.color = ''\n  }\n\n  function reconstructPath(start, currentNode, cameFrom) {\n    while (currentNode !== start) {\n      cameFrom[getCoords(currentNode)].classList.add('path')\n      cameFrom[getCoords(currentNode)].classList.remove('closed')\n      cameFrom[getCoords(currentNode)].classList.remove('open')\n      currentNode = cameFrom[getCoords(currentNode)]\n    }\n  }\n\n  // depth first search algorithm\n  function depthFirstSearch(start, end) {\n\n    var lifo = require('stack-lifo')\n    var stack = new lifo()\n    stack.push(start)\n\n    var cameFrom = {}\n    var closed = new Set()\n\n    interval = setInterval(function () {\n\n      var currentNode = stack.pop()\n\n      while (closed.has(currentNode)) {\n        currentNode = stack.pop()\n        if (stack.isEmpty()) {\n          stopInterval();\n          return\n        }\n      }\n\n      closed.add(currentNode)\n      currentNode.classList.add('closed')\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier')) {\n          continue\n        }\n        cameFrom[getCoords(neighbor)] = currentNode\n        stack.push(neighbor)\n      }\n      if (stack.isEmpty()) stopInterval();\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n    }, 10)\n  }\n\n  // breadth first search algorithm\n  function breadthFirstSearch(start, end) {\n\n    var nextQueue = new Queue()\n    nextQueue.add(start)\n    var nextQueueHash = new Set()\n\n    var cameFrom = {}\n\n    interval = setInterval(function () {\n\n      if (nextQueue.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var currentNode = nextQueue.dequeue()\n\n      var neighbors = getNeighbors(currentNode)\n\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier') || nextQueueHash.has(neighbor)) {\n          continue\n        }\n        nextQueue.add(neighbor)\n        nextQueueHash.add(neighbor)\n        neighbor.classList.add('open')\n        cameFrom[getCoords(neighbor)] = currentNode\n\n        if (neighbor === end) {\n          reconstructPath(start, neighbor, cameFrom)\n          stopInterval()\n          return\n        }\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n  }\n\n  // astar search algorithm\n  function astar(start, end) {\n\n    // heuristic function\n    function h(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var openSet = new PriorityQueue()\n    openSet.put(0, 0, start)\n    var openSetHash = new Set()\n    openSetHash.add(start)\n\n    var cameFrom = {}\n\n    var gScore = {}\n    var fScore = {}\n\n    gScore[getCoords(start)] = 0\n    fScore[getCoords(start)] = h(start, end)\n\n    interval = setInterval(function () {\n\n      \n      var currentNode;\n      var found = false;\n      while (!found) {\n        if (openSet.isEmpty()) {\n          stopInterval()\n          return\n        }\n        currentNode = openSet.get()[2]\n        found = openSetHash.delete(currentNode)\n      }\n\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('barrier')) {\n          continue\n        }\n\n        var tempGScore = gScore[getCoords(currentNode)] + 1\n        var currGScore = gScore[getCoords(neighbor)] || Infinity\n\n        if (tempGScore < currGScore) {\n          cameFrom[getCoords(neighbor)] = currentNode\n\n          gScore[getCoords(neighbor)] = tempGScore\n          fScore[getCoords(neighbor)] = tempGScore + h(neighbor, end)\n\n          openSet.put(fScore[getCoords(neighbor)], h(neighbor, end), neighbor)\n          openSetHash.add(neighbor)\n          neighbor.classList.add('open')\n        }\n\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n\n  }\n\n  // dijkstras search algorithm\n  function dijkstras(start, end) {\n\n    var distances = {}\n    var cameFrom = {}\n\n    function getDistance(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var priority = new PriorityQueue()\n    priority.put(0, 0, start)\n\n    interval = setInterval(function () {\n\n      if (priority.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var [distance, _, currentNode] = priority.get()\n\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (!(neighbor.classList.contains('closed') || neighbor.classList.contains('barrier'))) {\n          neighbor.classList.add('open')\n\n          var oldCost = distances[getCoords(neighbor)] || Infinity\n          var newCost = distance + 1\n\n          if (newCost < oldCost) {\n            priority.put(newCost, getDistance(neighbor, end), neighbor)\n            distances[getCoords(neighbor)] = newCost\n            cameFrom[getCoords(neighbor)] = currentNode\n          }\n        }\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n  }\n\n  // greedy best first search algorithm\n  function greedyBestFirstSearch(start, end) {\n\n    function getLowestHeuristic(heuristics) {\n      var lowestH = Infinity\n      var coords = []\n      for (const [key, value] of Object.entries(heuristics)) {\n        if (value < lowestH) {\n          lowestH = value\n          coords = key\n        }\n      }\n      if (lowestH === Infinity) {\n        return (null)\n      }\n      coords = coords.split(',')\n      for (var i = 0; i < 2; i++) {\n        coords[i] = parseInt(coords[i])\n      }\n      return (getElement(coords))\n    }\n\n    function distance(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var heuristics = {}\n    heuristics[getCoords(start)] = distance(start, end)\n\n    var cameFrom = {}\n\n    interval = setInterval(function () {\n\n      var currentNode = getLowestHeuristic(heuristics)\n\n      if (!currentNode) {\n        stopInterval();\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('barrier') || neighbor.classList.contains('closed')) {\n          continue\n        }\n\n        heuristics[getCoords(neighbor)] = distance(neighbor, end)\n        neighbor.classList.add('open')\n        cameFrom[getCoords(neighbor)] = currentNode\n\n        if (neighbor === end) {\n          reconstructPath(start, neighbor, cameFrom)\n          stopInterval()\n          return\n        }\n\n      }\n\n      heuristics[getCoords(currentNode)] = Infinity\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n\n  }\n\n  // astar search algorithm\n  function snake(start, end) {\n\n    // heuristic function\n    function h(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var openSet = new PriorityQueue()\n    openSet.put(0, 0, start)\n    var openSetHash = new Set()\n    openSetHash.add(start)\n\n    var cameFrom = {}\n    var count = 0\n\n    interval = setInterval(function () {\n\n      count += 1\n\n      var currentNode;\n      var found = false;\n      while (!found) {\n        if (openSet.isEmpty()) {\n          stopInterval()\n          return\n        }\n        currentNode = openSet.get()[2]\n        found = openSetHash.delete(currentNode)\n      }\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('barrier') || neighbor.classList.contains('closed')) {\n          continue\n        }\n\n        cameFrom[getCoords(neighbor)] = currentNode\n        \n        if (neighbor === end) {\n          reconstructPath(start, neighbor, cameFrom)\n          stopInterval()\n          return\n        }\n\n        openSet.put(-count, h(neighbor, end), neighbor)\n        openSetHash.add(neighbor)\n\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n\n  }\n\n  function algorithmChange(e) {\n    var algo = e.target.value\n    document.getElementById('infoAboutAlgo').innerHTML = writeUps[algo]\n  }\n\n  // no context menu, reload button pops up on resize\n  window.addEventListener('contextmenu', e => e.preventDefault())\n  window.addEventListener('resize', e => document.getElementById('resizeAlert').style.display = 'block')\n\n  // RENDERING\n\n  // default cell size\n  var boxSize = 20\n\n  var gridHeight = Math.floor((window.innerHeight - 90) / boxSize)\n  var gridWidth = Math.floor((window.innerWidth) / boxSize)\n\n  function getGrid() {\n    var grid = []\n    for (let row = 0; row < gridHeight; row++) {\n      grid.push([])\n      for (let col = 0; col < gridWidth; col++) {\n        grid[row].push(<Box row={row} col={col} boxSize={boxSize} startSet={startSet} endSet={endSet} setStartSet={setStartSet} setEndSet={setEndSet}/>)\n      }\n    }\n    return (grid)\n  }\n\n  var functionKeys = {\n    'depthFirstSearch': depthFirstSearch,\n    'breadthFirstSearch': breadthFirstSearch,\n    'aStar': astar,\n    'dijkstras': dijkstras,\n    \"greedy\": greedyBestFirstSearch,\n    \"snake\": snake\n  }\n\n  var writeUps = {\n    'depthFirstSearch': \"Depth First Search is <b>Not Weighted</b> and <b>Does Not Guarantee</b> the shortest path\",\n    'breadthFirstSearch': 'Breadth First Search is <b>Not Weighted</b> and <b>Guarantees</b> the shortest path',\n    'aStar': 'AStar is <b>Weighted</b> and <b>Guarantees</b> the shortest path',\n    'dijkstras': \"Dijkstras is <b>Weighted</b> and <b>Guarantees</b> the shortest path\",\n    \"greedy\": \"Greedy Best First Search is <b>Weighted</b> and <b>Does Not Guarantee</b> the shortest path\",\n    \"snake\": \"Snake is <b>Weighted</b> and <b>Does Not Guarantee</b> the shortest path\"\n  }\n\n  return (\n    <div className=\"App\" style={{ userSelect: 'none' }}>\n      <div id='header'>\n        <p onClick={() => startAlgorithm(functionKeys)} id='goButton'>Go</p>\n        <select id=\"algorithm\" onChange={(e) => algorithmChange(e)}>\n          <option value='aStar'>AStar</option>\n          <option value='greedy'>Greedy Best First Search</option>\n          <option value='dijkstras'>Dijkstras</option>\n          <option value='breadthFirstSearch'>Breadth First Search</option>\n          <option value='depthFirstSearch'>Depth First Search</option>\n          <option value='snake'>Snake</option>\n        </select>\n      </div>\n      <div id='infoBar'>\n        <p id='infoAboutAlgo'>AStar is <b>Weighted</b> and <b>Guarantees</b> the shortest path</p>\n      </div>\n      <div id='grid'>\n        {getGrid().map((row, key) => {\n          return (\n            <div className='row' id={key}>\n              {row.map((element) => {\n                return (element)\n              })}\n            </div>\n          )\n        })}\n      </div>\n      <span id='resizeAlert' onClick={() => window.location.reload()}>Looks like you resized your window. <br /> Click here to reset the grid</span>\n      <p id='myName'><a href='https://owenmoogk.github.io' target='_blank' rel='noreferrer'>Owen Moogk</a></p>\n      <p id='infoButton'><a href='https://owenmoogk.github.io/projects/pathfinding-visualizer' target='_blank' rel='noreferrer'>About This Project</a></p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}