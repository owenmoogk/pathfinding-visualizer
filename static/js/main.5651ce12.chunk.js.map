{"version":3,"sources":["Box.js","Queue.js","App.js","index.js"],"names":["Box","props","id","row","col","style","border","height","boxSize","toString","width","Queue","this","elements","prototype","add","e","push","dequeue","shift","isEmpty","length","App","useState","running","setRunning","interval","undefined","getCoords","element","getAttribute","parseInt","getElement","coords","document","getElementById","getNeighbors","filter","a","stopInterval","clearInterval","paint","clickOverride","Math","floor","clientX","window","innerWidth","offsetWidth","getElementsByClassName","childNodes","clientY","event","buttons","classList","endNode","contains","lastClickedCoords","currentRow","currentCol","currBox","className","addEventListener","preventDefault","display","gridHeight","innerHeight","gridWidth","functionKeys","start","end","stack","require","cameFrom","closed","Set","setInterval","currentNode","pop","has","neighbors","i","neighbor","remove","nextQueue","nextQueueHash","userSelect","onClick","algorithmFunction","value","blankElements","name","Array","from","forEach","startAlgorithm","color","onMouseMove","onMouseDown","grid","getGrid","map","key","location","reload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5651ce12.chunk.js","sourcesContent":["\r\nexport default function Box(props){\r\n    return(\r\n        <div id={'row'+props.row+\"col\"+props.col} row={props.row} col={props.col} style={{\r\n            // backgroundColor: 'grey',\r\n            border: '1px solid black',\r\n            height: (props.boxSize-2).toString() + 'px',\r\n            width: (props.boxSize-2).toString() + 'px'\r\n        }}></div>\r\n    )\r\n}","export default function Queue() {\r\n    this.elements = []\r\n\r\n    Queue.prototype.add = function(e) {\r\n        this.elements.push(e)\r\n    }\r\n\r\n    Queue.prototype.dequeue = function () {\r\n        return this.elements.shift()\r\n    }\r\n\r\n    Queue.prototype.isEmpty = function () {\r\n        return this.elements.length === 0\r\n    }\r\n}","import PriorityQueue from 'js-priority-queue'\nimport Box from './Box.js'\nimport './styles.css'\nimport Queue from './Queue'\nimport { useState } from 'react'\n\nexport default function App() {\n\n  // keep track of weather or not it is running\n  const [running, setRunning] = useState()\n\n  // timing for visualizations\n  var interval = undefined;\n\n  // getting grid coords from cell element\n  function getCoords(element) {\n    var row = element.getAttribute('row')\n    var col = element.getAttribute('col')\n    row = parseInt(row)\n    col = parseInt(col)\n    return ([row, col])\n  }\n\n  // getting cell element from grid coords\n  function getElement(coords) {\n    var [row, col] = coords\n    return (document.getElementById('row' + row + 'col' + col))\n  }\n\n  // clears the used squares before running, checks start and end, passed the function to call.\n  function startAlgorithm(functionKeys) {\n\n    if (running) {\n      return\n    }\n\n    setRunning(true)\n    var algorithmFunction = functionKeys[document.getElementById('algorithm').value]\n\n    function blankElements(elements, name) {\n      Array.from(elements).forEach(element => {\n        if (!(element.classList.contains('start') || element.classList.contains('end'))) {\n          element.classList.remove(name)\n        }\n      })\n    }\n    try {\n      var start = document.getElementsByClassName('start')[0]\n      var end = document.getElementsByClassName('end')[0]\n      start.classList = 'start'\n      end.classList = 'end'\n    }\n    catch {\n      return\n    }\n    blankElements(document.getElementsByClassName('closed'), 'closed')\n    blankElements(document.getElementsByClassName('path'), 'path')\n    blankElements(document.getElementsByClassName('open'), 'open')\n\n    algorithmFunction(start, end)\n  }\n\n  // get the given neighbors of a cell.. this includes barriers and closed nodes so have to filter in the function\n  function getNeighbors(element) {\n    var [row, col] = getCoords(element)\n    var elements = []\n    elements.push(getElement([row + 1, col]))\n    elements.push(getElement([row - 1, col]))\n    elements.push(getElement([row, col + 1]))\n    elements.push(getElement([row, col - 1]))\n    elements = elements.filter((a) => a)\n\n    return (elements)\n  }\n\n  // stop the interval from running when the algorithm is done\n  function stopInterval() {\n    clearInterval(interval)\n    setRunning(false)\n  }\n\n  // depth first search algorithm\n  function depthFirstSearch(start, end) {\n\n    var lifo = require('stack-lifo')\n    var stack = new lifo()\n    stack.push(start)\n\n    var cameFrom = {}\n    var closed = new Set()\n\n    interval = setInterval(function () {\n\n      var currentNode = stack.pop()\n\n      while (closed.has(currentNode)) {\n        currentNode = stack.pop()\n        if (stack.isEmpty()) {\n          stopInterval();\n          return\n        }\n      }\n\n      closed.add(currentNode)\n      currentNode.classList.add('closed')\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier')) {\n          continue\n        }\n        cameFrom[getCoords(neighbor)] = currentNode\n        stack.push(neighbor)\n      }\n      if (stack.isEmpty()) stopInterval();\n      if (currentNode === end) {\n        while (currentNode !== start) {\n          cameFrom[getCoords(currentNode)].classList.add('path')\n          cameFrom[getCoords(currentNode)].classList.remove('closed')\n          currentNode = cameFrom[getCoords(currentNode)]\n        }\n        stopInterval()\n        return\n      }\n    }, 10)\n  }\n\n  // breadth first search algorithm\n  function breadthFirstSearch(start, end) {\n\n    var nextQueue = new Queue()\n    nextQueue.add(start)\n    var nextQueueHash = new Set()\n\n    var cameFrom = {}\n\n    interval = setInterval(function () {\n\n      if (nextQueue.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var currentNode = nextQueue.dequeue()\n\n      var neighbors = getNeighbors(currentNode)\n\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier') || nextQueueHash.has(neighbor)) {\n          continue\n        }\n        nextQueue.add(neighbor)\n        nextQueueHash.add(neighbor)\n        neighbor.classList.add('open')\n        cameFrom[getCoords(neighbor)] = currentNode\n\n        if (neighbor === end) {\n          while (neighbor !== start) {\n            cameFrom[getCoords(neighbor)].classList.add('path')\n            cameFrom[getCoords(neighbor)].classList.remove('closed')\n            cameFrom[getCoords(neighbor)].classList.remove('open')\n            neighbor = cameFrom[getCoords(neighbor)]\n          }\n          stopInterval()\n          return\n        }\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n  }\n\n  // paint function takes a event and paints color onto the screen\n  // click override is just saying it was a click event and not mouse movement, so it doesnt pass a button, we have to manually set it\n  function paint(e, clickOverride = false) {\n\n    // big math to figure out which cell the mouse is over\n    var col = Math.floor((e.clientX - ((window.innerWidth - document.getElementById('grid').offsetWidth) / 2)) / document.getElementsByClassName('row')[0].childNodes[0].offsetWidth)\n    var row = Math.floor((e.clientY - 60) / boxSize)\n\n    if (window.event.buttons !== 0 || clickOverride) {\n\n      var element = document.getElementById('row' + row + 'col' + col)\n      if (!element) {\n        return\n      }\n\n      // check to see if start and end exist, and if not and left clicking place them\n      if (document.getElementsByClassName('start').length === 0 && (window.event.buttons === 1 || clickOverride)) {\n        document.getElementById('row' + row + 'col' + col).classList.add('start')\n        return\n      }\n      if (document.getElementsByClassName('end').length === 0 && (window.event.buttons === 1 || clickOverride)) {\n        var endNode = document.getElementById('row' + row + 'col' + col)\n        if (endNode.classList.contains('start')) {\n          return\n        }\n        endNode.classList.add('end')\n        return\n      }\n\n      // paint the boxes when clicked, including the ones inbetween cuz it doesnt fire enough\n      if (!lastClickedCoords) {\n        var currentRow = row\n        var currentCol = col\n      }\n      else {\n        currentRow = lastClickedCoords[0]\n        currentCol = lastClickedCoords[1]\n      }\n\n      do {\n        if (row > currentRow) {\n          currentRow += 1\n        }\n        else if (row < currentRow) {\n          currentRow -= 1\n        }\n        if (col > currentCol) {\n          currentCol += 1\n        }\n        else if (col < currentCol) {\n          currentCol -= 1\n        }\n\n        if (window.event.buttons === 1) {\n          var currBox = document.getElementById('row' + currentRow + 'col' + currentCol)\n          if (!(currBox.classList.contains('start') || currBox.classList.contains('end'))) {\n            currBox.classList.add('barrier')\n          }\n        }\n        else if (window.event.buttons === 2) {\n          document.getElementById('row' + currentRow + 'col' + currentCol).className = ''\n        }\n      } while (currentRow !== row || currentCol !== col);\n      lastClickedCoords = [row, col]\n    }\n    else {\n      lastClickedCoords = null\n    }\n  }\n\n  // QUEUE TESTING\n  // var queue = new PriorityQueue()\n  // queue.queue('owen')\n  // console.log(queue.length)\n  // console.log(queue.peek())\n  // console.log(queue.dequeue())\n  // console.log(queue.peek())\n\n\n  // no context menu, reload button pops up on resize\n  window.addEventListener('contextmenu', e => e.preventDefault())\n  window.addEventListener('resize', e => document.getElementById('resizeAlert').style.display = 'block')\n\n  // RENDERING\n\n  // default cell size\n  var boxSize = 20\n  // used to trace the mouse, as the events don't trigger fast enough for me :/\n  var lastClickedCoords = null\n\n  var gridHeight = Math.floor((window.innerHeight - 60) / boxSize)\n  var gridWidth = Math.floor((window.innerWidth) / boxSize)\n\n  function getGrid() {\n    var grid = []\n    for (let row = 0; row < gridHeight; row++) {\n      grid.push([])\n      for (let col = 0; col < gridWidth; col++) {\n        grid[row].push(<Box row={row} col={col} boxSize={boxSize} />)\n      }\n    }\n    return (grid)\n  }\n\n  var functionKeys = {\n    'depthFirstSearch': depthFirstSearch,\n    'breadthFirstSearch': breadthFirstSearch,\n  }\n\n  return (\n    <div className=\"App\" style={{ userSelect: 'none' }}>\n      <div id='header'>\n        <p onClick={() => startAlgorithm(functionKeys)} style={{ color: running ? 'grey' : 'white' }}>Go</p>\n        <select id=\"algorithm\">\n          <option value='breadthFirstSearch'>Breadth First Search</option>\n          <option value='depthFirstSearch'>Depth First Search</option>\n        </select>\n      </div>\n      <div id='grid' onMouseMove={e => paint(e)} onMouseDown={e => paint(e, true)}>\n        {getGrid().map((row, key) => {\n          return (\n            <div className='row' id={key}>\n              {row.map((element) => {\n                return (element)\n              })}\n            </div>\n          )\n        })}\n      </div>\n      <span id='resizeAlert' onClick={() => window.location.reload()}>Looks like you resized your window. <br /> Click here to reset the grid</span>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}