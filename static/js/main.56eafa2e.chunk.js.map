{"version":3,"sources":["Box.js","Queue.js","PriorityQueue.js","App.js","index.js"],"names":["Box","props","id","row","col","style","border","height","boxSize","toString","width","Queue","this","elements","prototype","add","e","push","dequeue","shift","isEmpty","length","QElement","priority","priority2","element","PriorityQueue","items","qElement","contain","i","splice","value","App","running","interval","undefined","getCoords","getAttribute","parseInt","getElement","coords","document","getElementById","getNeighbors","filter","a","stopInterval","clearInterval","goButton","innerHTML","color","reconstructPath","start","currentNode","cameFrom","classList","remove","paint","clickOverride","window","event","buttons","lastClickedCoords","Math","floor","clientX","innerWidth","offsetWidth","getElementsByClassName","childNodes","clientY","endNode","contains","currentRow","currentCol","currBox","className","addEventListener","preventDefault","display","gridHeight","innerHeight","gridWidth","functionKeys","end","stack","require","closed","Set","setInterval","pop","has","neighbors","neighbor","nextQueue","nextQueueHash","h","point1","point2","row1","col1","row2","col2","abs","openSet","put","openSetHash","gScore","fScore","found","get","delete","tempGScore","Infinity","distances","getDistance","distance","newCost","heuristics","lowestH","Object","entries","key","split","getLowestHeuristic","writeUps","userSelect","onClick","algorithmFunction","blankElements","name","Array","from","forEach","startAlgorithm","onChange","algo","target","algorithmChange","onMouseMove","onMouseDown","grid","getGrid","map","location","reload","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.56eafa2e.chunk.js","sourcesContent":["\r\nexport default function Box(props){\r\n    return(\r\n        <div id={'row'+props.row+\"col\"+props.col} row={props.row} col={props.col} style={{\r\n            // backgroundColor: 'grey',\r\n            border: '1px solid black',\r\n            height: (props.boxSize-2).toString() + 'px',\r\n            width: (props.boxSize-2).toString() + 'px'\r\n        }}></div>\r\n    )\r\n}","export default function Queue() {\r\n    this.elements = []\r\n\r\n    Queue.prototype.add = function(e) {\r\n        this.elements.push(e)\r\n    }\r\n\r\n    Queue.prototype.dequeue = function () {\r\n        return this.elements.shift()\r\n    }\r\n\r\n    Queue.prototype.isEmpty = function () {\r\n        return this.elements.length === 0\r\n    }\r\n}","// https://www.geeksforgeeks.org/implementation-priority-queue-javascript/\r\n\r\n// User defined class\r\n// to store element and its priority\r\nclass QElement {\r\n    constructor(priority, priority2, element) {\r\n        this.element = element;\r\n        this.priority = priority;\r\n        this.priority2 = priority2\r\n    }\r\n}\r\n\r\n// PriorityQueue class\r\nexport default class PriorityQueue {\r\n\r\n    // An array is used to implement priority\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    // functions to be implemented\r\n    // put(item, priority)\r\n    // dequeue()\r\n    // front()\r\n    // isEmpty()\r\n    // printPQueue()\r\n\r\n\r\n    put(priority, priority2, element) {\r\n        // creating object from queue element\r\n        var qElement = new QElement(priority, priority2, element);\r\n        var contain = false;\r\n\r\n        // iterating through the entire\r\n        // item array to add element at the\r\n        // correct location of the Queue\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if ((this.items[i].priority > qElement.priority) || (this.items[i].priority === qElement.priority && this.items[i].priority2 > qElement.priority2)) {\r\n                this.items.splice(i, 0, qElement);\r\n                contain = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // if the element have the highest priority\r\n        // it is added at the end of the queue\r\n        if (!contain) {\r\n            this.items.push(qElement);\r\n        }\r\n    }\r\n\r\n    get() {\r\n        // return the dequeued element\r\n        // and remove it.\r\n        // if the queue is empty\r\n        // returns Underflow\r\n        if (this.isEmpty())\r\n            return \"Underflow\";\r\n        var value = this.items.shift()\r\n        return [value.priority, value.priority2, value.element];\r\n    }\r\n    front() {\r\n        // returns the highest priority element\r\n        // in the Priority queue without removing it.\r\n        if (this.isEmpty())\r\n            return \"No elements in Queue\";\r\n        return this.items[0];\r\n    }\r\n\r\n    isEmpty() {\r\n        // return true if the queue is empty.\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    look() {\r\n        return(this.items)\r\n    }\r\n}","import Box from './Box.js'\nimport './styles.css'\nimport Queue from './Queue'\nimport PriorityQueue from './PriorityQueue.js'\n\nexport default function App() {\n\n  // keep track of weather or not it is running\n  var running;\n\n  // timing for visualizations\n  var interval = undefined;\n\n  // getting grid coords from cell element\n  function getCoords(element) {\n    var row = element.getAttribute('row')\n    var col = element.getAttribute('col')\n    row = parseInt(row)\n    col = parseInt(col)\n    return ([row, col])\n  }\n\n  // getting cell element from grid coords\n  function getElement(coords) {\n    var [row, col] = coords\n    return (document.getElementById('row' + row + 'col' + col))\n  }\n\n  // clears the used squares before running, checks start and end, passed the function to call.\n  function startAlgorithm(functionKeys) {\n    if (running) {\n      stopInterval()\n      return\n    }\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Stop\"\n    goButton.style.color = 'Red'\n\n    running = true\n    var algorithmFunction = functionKeys[document.getElementById('algorithm').value]\n\n    function blankElements(elements, name) {\n      Array.from(elements).forEach(element => element.classList.remove(name))\n    }\n    try {\n      var start = document.getElementsByClassName('start')[0]\n      var end = document.getElementsByClassName('end')[0]\n      start.classList = 'start'\n      end.classList = 'end'\n    }\n    catch {\n      return\n    }\n    blankElements(document.getElementsByClassName('closed'), 'closed')\n    blankElements(document.getElementsByClassName('path'), 'path')\n    blankElements(document.getElementsByClassName('open'), 'open')\n    \n    algorithmFunction(start, end)\n  }\n\n  // get the given neighbors of a cell.. this includes barriers and closed nodes so have to filter in the function\n  function getNeighbors(element) {\n    var [row, col] = getCoords(element)\n    var elements = []\n    elements.push(getElement([row + 1, col]))\n    elements.push(getElement([row - 1, col]))\n    elements.push(getElement([row, col + 1]))\n    elements.push(getElement([row, col - 1]))\n    elements = elements.filter((a) => a)\n\n    return (elements)\n  }\n\n  // stop the interval from running when the algorithm is done\n  function stopInterval() {\n    clearInterval(interval)\n    running = false\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Go\"\n    goButton.style.color = ''\n  }\n\n  function reconstructPath(start, currentNode, cameFrom) {\n    while (currentNode !== start) {\n      cameFrom[getCoords(currentNode)].classList.add('path')\n      cameFrom[getCoords(currentNode)].classList.remove('closed')\n      cameFrom[getCoords(currentNode)].classList.remove('open')\n      currentNode = cameFrom[getCoords(currentNode)]\n    }\n  }\n\n  // depth first search algorithm\n  function depthFirstSearch(start, end) {\n\n    var lifo = require('stack-lifo')\n    var stack = new lifo()\n    stack.push(start)\n\n    var cameFrom = {}\n    var closed = new Set()\n\n    interval = setInterval(function () {\n\n      var currentNode = stack.pop()\n\n      while (closed.has(currentNode)) {\n        currentNode = stack.pop()\n        if (stack.isEmpty()) {\n          stopInterval();\n          return\n        }\n      }\n\n      closed.add(currentNode)\n      currentNode.classList.add('closed')\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier')) {\n          continue\n        }\n        cameFrom[getCoords(neighbor)] = currentNode\n        stack.push(neighbor)\n      }\n      if (stack.isEmpty()) stopInterval();\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n    }, 10)\n  }\n\n  // breadth first search algorithm\n  function breadthFirstSearch(start, end) {\n\n    var nextQueue = new Queue()\n    nextQueue.add(start)\n    var nextQueueHash = new Set()\n\n    var cameFrom = {}\n\n    interval = setInterval(function () {\n\n      if (nextQueue.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var currentNode = nextQueue.dequeue()\n\n      var neighbors = getNeighbors(currentNode)\n\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('closed') || neighbor.classList.contains('barrier') || nextQueueHash.has(neighbor)) {\n          continue\n        }\n        nextQueue.add(neighbor)\n        nextQueueHash.add(neighbor)\n        neighbor.classList.add('open')\n        cameFrom[getCoords(neighbor)] = currentNode\n\n        if (neighbor === end) {\n          reconstructPath(start, neighbor, cameFrom)\n          stopInterval()\n          return\n        }\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n  }\n\n  // astar search algorithm\n  function astar(start, end) {\n\n    // heuristic function\n    function h(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var openSet = new PriorityQueue()\n    openSet.put(0, 0, start)\n    var openSetHash = new Set()\n    openSetHash.add(start)\n\n    var cameFrom = {}\n\n    var gScore = {}\n    var fScore = {}\n\n    gScore[getCoords(start)] = 0\n    fScore[getCoords(start)] = h(start, end)\n\n    interval = setInterval(function () {\n\n      if (openSet.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var currentNode;\n      var found = false;\n      while (!found) {\n        currentNode = openSet.get()[2]\n        found = openSetHash.delete(currentNode)\n      }\n\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('barrier')) {\n          continue\n        }\n\n        var tempGScore = gScore[getCoords(currentNode)] + 1\n        var currGScore = gScore[getCoords(neighbor)] || Infinity\n\n        if (tempGScore < currGScore) {\n          cameFrom[getCoords(neighbor)] = currentNode\n\n          gScore[getCoords(neighbor)] = tempGScore\n          fScore[getCoords(neighbor)] = tempGScore + h(neighbor, end)\n\n          openSet.put(fScore[getCoords(neighbor)], h(neighbor, end), neighbor)\n          openSetHash.add(neighbor)\n          neighbor.classList.add('open')\n        }\n\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n\n  }\n\n  // dijkstras search algorithm\n  function dijkstras(start, end) {\n\n    var distances = {}\n    var cameFrom = {}\n\n    function getDistance(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var priority = new PriorityQueue()\n    priority.put(0, 0, start)\n\n    interval = setInterval(function () {\n\n      if (priority.isEmpty()) {\n        stopInterval()\n        return\n      }\n\n      var [distance, ignore, currentNode] = priority.get()\n\n      if (currentNode === end) {\n        reconstructPath(start, currentNode, cameFrom)\n        stopInterval()\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (!(neighbor.classList.contains('closed') || neighbor.classList.contains('barrier'))) {\n          neighbor.classList.add('open')\n\n          var oldCost = distances[getCoords(neighbor)] || Infinity\n          var newCost = distance + 1\n\n          if (newCost < oldCost) {\n            priority.put(newCost, getDistance(neighbor, end), neighbor)\n            distances[getCoords(neighbor)] = newCost\n            cameFrom[getCoords(neighbor)] = currentNode\n          }\n        }\n      }\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n  }\n\n  // greedy best first search algorithm\n  function greedyBestFirstSearch(start, end) {\n\n    function getLowestHeuristic(heuristics) {\n      var lowestH = Infinity\n      var coords = []\n      for (const [key, value] of Object.entries(heuristics)) {\n        if (value < lowestH) {\n          lowestH = value\n          coords = key\n        }\n      }\n      if (lowestH === Infinity) {\n        return (null)\n      }\n      coords = coords.split(',')\n      for (var i = 0; i < 2; i++) {\n        coords[i] = parseInt(coords[i])\n      }\n      return (getElement(coords))\n    }\n\n    function distance(point1, point2) {\n      var [row1, col1] = getCoords(point1)\n      var [row2, col2] = getCoords(point2)\n      return (Math.abs(row1 - row2) + Math.abs(col1 - col2))\n    }\n\n    var heuristics = {}\n    heuristics[getCoords(start)] = distance(start, end)\n\n    var cameFrom = {}\n\n    interval = setInterval(function () {\n\n      var currentNode = getLowestHeuristic(heuristics)\n\n      if (!currentNode) {\n        stopInterval();\n        return\n      }\n\n      var neighbors = getNeighbors(currentNode)\n      for (let i = 0; i < neighbors.length; i++) {\n        var neighbor = neighbors[i]\n        if (neighbor.classList.contains('barrier') || neighbor.classList.contains('closed')) {\n          continue\n        }\n\n        heuristics[getCoords(neighbor)] = distance(neighbor, end)\n        neighbor.classList.add('open')\n        cameFrom[getCoords(neighbor)] = currentNode\n\n        if (neighbor === end) {\n          reconstructPath(start, neighbor, cameFrom)\n          stopInterval()\n          return\n        }\n\n      }\n\n      heuristics[getCoords(currentNode)] = Infinity\n\n      currentNode.classList.remove('open')\n      currentNode.classList.add('closed')\n    }, 10)\n\n  }\n\n  // paint function takes a event and paints color onto the screen\n  // click override is just saying it was a click event and not mouse movement, so it doesnt pass a button, we have to manually set it\n  function paint(e, clickOverride = false) {\n\n    if ((window.event.buttons !== 0 || clickOverride) && !running) {\n      // big math to figure out which cell the mouse is over\n      var col = Math.floor((e.clientX - ((window.innerWidth - document.getElementById('grid').offsetWidth) / 2)) / document.getElementsByClassName('row')[0].childNodes[0].offsetWidth)\n      var row = Math.floor((e.clientY - 90) / boxSize)\n\n      var element = document.getElementById('row' + row + 'col' + col)\n      if (!element) {\n        return\n      }\n\n      // check to see if start and end exist, and if not and left clicking place them\n      if (document.getElementsByClassName('start').length === 0 && (window.event.buttons === 1 || clickOverride)) {\n        document.getElementById('row' + row + 'col' + col).classList.add('start')\n        return\n      }\n      if (document.getElementsByClassName('end').length === 0 && (window.event.buttons === 1 || clickOverride)) {\n        var endNode = document.getElementById('row' + row + 'col' + col)\n        if (endNode.classList.contains('start')) {\n          return\n        }\n        endNode.classList.add('end')\n        return\n      }\n\n      // paint the boxes when clicked, including the ones inbetween cuz it doesnt fire enough\n      if (!lastClickedCoords) {\n        var currentRow = row\n        var currentCol = col\n      }\n      else {\n        currentRow = lastClickedCoords[0]\n        currentCol = lastClickedCoords[1]\n      }\n\n      do {\n        if (row > currentRow) {\n          currentRow += 1\n        }\n        else if (row < currentRow) {\n          currentRow -= 1\n        }\n        if (col > currentCol) {\n          currentCol += 1\n        }\n        else if (col < currentCol) {\n          currentCol -= 1\n        }\n\n        if (window.event.buttons === 1) {\n          var currBox = document.getElementById('row' + currentRow + 'col' + currentCol)\n          if (!(currBox.classList.contains('start') || currBox.classList.contains('end'))) {\n            currBox.classList.add('barrier')\n          }\n        }\n        else if (window.event.buttons === 2) {\n          document.getElementById('row' + currentRow + 'col' + currentCol).className = ''\n        }\n      } while (currentRow !== row || currentCol !== col);\n      lastClickedCoords = [row, col]\n    }\n    else {\n      lastClickedCoords = null\n    }\n  }\n\n  function algorithmChange(e) {\n    var algo = e.target.value\n    document.getElementById('infoAboutAlgo').innerHTML = writeUps[algo]\n  }\n\n  // no context menu, reload button pops up on resize\n  window.addEventListener('contextmenu', e => e.preventDefault())\n  window.addEventListener('resize', e => document.getElementById('resizeAlert').style.display = 'block')\n\n  // RENDERING\n\n  // default cell size\n  var boxSize = 20\n  // used to trace the mouse, as the events don't trigger fast enough for me :/\n  var lastClickedCoords = null\n\n  var gridHeight = Math.floor((window.innerHeight - 90) / boxSize)\n  var gridWidth = Math.floor((window.innerWidth) / boxSize)\n\n  function getGrid() {\n    var grid = []\n    for (let row = 0; row < gridHeight; row++) {\n      grid.push([])\n      for (let col = 0; col < gridWidth; col++) {\n        grid[row].push(<Box row={row} col={col} boxSize={boxSize} />)\n      }\n    }\n    return (grid)\n  }\n\n  var functionKeys = {\n    'depthFirstSearch': depthFirstSearch,\n    'breadthFirstSearch': breadthFirstSearch,\n    'aStar': astar,\n    'dijkstras': dijkstras,\n    \"greedy\": greedyBestFirstSearch\n  }\n\n  var writeUps = {\n    'depthFirstSearch': \"Depth First Search is <b>Not Weighted</b> and <b>Does Not Guarantee</b> the shortest path\",\n    'breadthFirstSearch': 'Breadth First Search is <b>Not Weighted</b> and <b>Guarantees</b> the shortest path',\n    'aStar': 'AStar is <b>Weighted</b> and <b>Guarantees</b> the shortest path',\n    'dijkstras': \"Dijkstras is <b>Weighted</b> and <b>Guarantees</b> the shortest path\",\n    \"greedy\": \"Greedy Best First Search is <b>Weighted</b> and <b>Does Not Guarantee</b> the shortest path\"\n  }\n\n  return (\n    <div className=\"App\" style={{ userSelect: 'none' }}>\n      <div id='header'>\n        <p onClick={() => startAlgorithm(functionKeys)} id='goButton'>Go</p>\n        <select id=\"algorithm\" onChange={(e) => algorithmChange(e)}>\n          <option value='aStar'>AStar</option>\n          <option value='greedy'>Greedy Best First Search</option>\n          <option value='dijkstras'>Dijkstras</option>\n          <option value='breadthFirstSearch'>Breadth First Search</option>\n          <option value='depthFirstSearch'>Depth First Search</option>\n        </select>\n      </div>\n      <div id='infoBar'>\n        <p id='infoAboutAlgo'>AStar is <b>Weighted</b> and <b>Guarantees</b> the shortest path</p>\n      </div>\n      <div id='grid' onMouseMove={e => paint(e)} onMouseDown={e => paint(e, true)}>\n        {getGrid().map((row, key) => {\n          return (\n            <div className='row' id={key}>\n              {row.map((element) => {\n                return (element)\n              })}\n            </div>\n          )\n        })}\n      </div>\n      <span id='resizeAlert' onClick={() => window.location.reload()}>Looks like you resized your window. <br /> Click here to reset the grid</span>\n      <p id='myName'><a href='https://owenmoogk.tk' target='_blank' rel='noreferrer'>Owen Moogk</a></p>\n      <p id='infoButton'><a href='https://owenmoogk.tk/projects/pathfinding-visualizer' target='_blank' rel='noreferrer'>About This Project</a></p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}